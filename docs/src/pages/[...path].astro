---
import { getCollection } from "astro:content";

export async function getStaticPaths() {
  function parse<T extends `${string}/v${number}${string}`>(slug: T): {
    path: T extends `${string}/v${number}/${infer U}` ? U : "";
    lang: T extends `${infer U}/${string}` ? U : unknown;
    version: T extends `${string}/v${infer U extends number}${string}` ? U : unknown;
  } {
    const [, lang, version, path] = slug.match(/^([^/]+)\/v(\d+)\/?(.*)/) as [
      string,
      string,
      string,
      string,
    ]

    // @ts-expect-error
    return { path, lang, version: Number(version), }
  }

  const docs = await getCollection("docs");
  const paths: Record<string, any> = {};
  let latest: number;

  for (const { data, slug } of docs) {
    if (data.draft) {
      continue;
    }

    const { path, lang, version } = parse(slug);
    const rootPath = path;
    const withLangPath = path === ""
      ? `${lang}` as const
      : `${lang}/${path}` as const;
    const withVersionPath = path === ""
      ? `v${version}` as const
      : `v${version}/${path}` as const;

    (paths[rootPath] ||= {
      params: {
        path: rootPath,
      },
      props: {
        route: "both",
        title: data.title,
        langs: [],
      },
    }).props.langs.push(lang);

    // @ts-ignore
    if (lang === "en") {
      paths[rootPath].props.title = data.title;
    }

    (paths[withLangPath] ||= {
      params: {
        path: withLangPath,
      },
      props: {
        route: "version",
        title: data.title,
        langs: [],
      },
    }).props.langs.push(lang);

    // @ts-ignore
    if (lang === "en") {
      paths[withLangPath].props.title = data.title;
    }

    (paths[withVersionPath] ||= {
      params: {
        path: withVersionPath,
      },
      props: {
        route: "lang",
        title: data.title,
        langs: [],
      },
    }).props.langs.push(lang);

    // @ts-ignore
    if (lang === "en") {
      paths[withVersionPath].props.title = data.title;
    }

    latest ??= version;

    if (latest < version) {
      latest = version;
    }
  }

  return Object.values(paths).map(v => ({
    ...v,
    props: {
      ...v.props,
      langs: [...new Set(v.props.langs)],
      latest,
    },
  }));
}

type Props = {
  route: "both" | "lang" | "version";
  title: string;
  langs: string[];
  latest: number;
};

const {
  route,
  title: titleText,
  langs,
  latest,
} = Astro.props;
---

<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="color-scheme" content="dark light">
    <title>{titleText}</title>
    <script>
      declare global {
        var langs: string[]
        var latest: number;
      }
    </script>


    {route !== "both" ? null : <script is:inline define:vars={{ langs, latest }}>
function redirect(lang) {
  const pathname = window.location.pathname.replace(
    /^\/surrealdb\.js(\/)?/, `/surrealdb.js/${lang}/v${latest}/`);
  window.location.pathname = window.location.pathname === pathname
    ? "/404"
    : pathname;
}

for (const lang of langs) {
  if (window.navigator.languages.includes(lang)) {
    return redirect(lang);
  }
}

redirect(langs.includes("en") ? "en" : langs[0]);
</script>}


    {route !== "lang" ? null : <script is:inline define:vars={{ langs }}>
function redirect(lang) {
  const pathname = window.location.pathname.replace(
    /^\/surrealdb\.js(\/)?/, `/surrealdb.js/${lang}/`);
  window.location.pathname = window.location.pathname === pathname
    ? "/404"
    : pathname;
}

for (const lang of langs) {
  if (window.navigator.languages.includes(lang)) {
    return redirect(lang);
  }
}

redirect(langs.includes("en") ? "en" : langs[0]);
</script>}


    {route !== "version" ? null : <script is:inline define:vars={{ langs, latest }}>
function redirect() {
  const pathname = window.location.pathname.replace(
    /^\/surrealdb\.js\/([^\/]+)(\/)?/, `/surrealdb.js/$1/v${latest}/`);
  window.location.pathname = window.location.pathname === pathname
    ? "/404"
    : pathname;
}

redirect();
</script>}


  </head>
  <body>
    <p>Redirecting based on your browser language...</p>
  </body>
</html>
